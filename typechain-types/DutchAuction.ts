/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface DutchAuctionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buy"
      | "discountRate"
      | "endsAt"
      | "getPrice"
      | "item"
      | "seller"
      | "startAt"
      | "startingPrice"
      | "stopped"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Bought"): EventFragment;

  encodeFunctionData(functionFragment: "buy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "discountRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "endsAt", values?: undefined): string;
  encodeFunctionData(functionFragment: "getPrice", values?: undefined): string;
  encodeFunctionData(functionFragment: "item", values?: undefined): string;
  encodeFunctionData(functionFragment: "seller", values?: undefined): string;
  encodeFunctionData(functionFragment: "startAt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "startingPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stopped", values?: undefined): string;

  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "discountRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endsAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "item", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "seller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startingPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stopped", data: BytesLike): Result;
}

export namespace BoughtEvent {
  export type InputTuple = [price: BigNumberish, buyer: AddressLike];
  export type OutputTuple = [price: bigint, buyer: string];
  export interface OutputObject {
    price: bigint;
    buyer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DutchAuction extends BaseContract {
  connect(runner?: ContractRunner | null): DutchAuction;
  waitForDeployment(): Promise<this>;

  interface: DutchAuctionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buy: TypedContractMethod<[], [void], "payable">;

  discountRate: TypedContractMethod<[], [bigint], "view">;

  endsAt: TypedContractMethod<[], [bigint], "view">;

  getPrice: TypedContractMethod<[], [bigint], "view">;

  item: TypedContractMethod<[], [string], "view">;

  seller: TypedContractMethod<[], [string], "view">;

  startAt: TypedContractMethod<[], [bigint], "view">;

  startingPrice: TypedContractMethod<[], [bigint], "view">;

  stopped: TypedContractMethod<[], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buy"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "discountRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "endsAt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "item"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "seller"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "startAt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "startingPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "stopped"
  ): TypedContractMethod<[], [boolean], "view">;

  getEvent(
    key: "Bought"
  ): TypedContractEvent<
    BoughtEvent.InputTuple,
    BoughtEvent.OutputTuple,
    BoughtEvent.OutputObject
  >;

  filters: {
    "Bought(uint256,address)": TypedContractEvent<
      BoughtEvent.InputTuple,
      BoughtEvent.OutputTuple,
      BoughtEvent.OutputObject
    >;
    Bought: TypedContractEvent<
      BoughtEvent.InputTuple,
      BoughtEvent.OutputTuple,
      BoughtEvent.OutputObject
    >;
  };
}
